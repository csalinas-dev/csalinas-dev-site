// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  password      String?        // Added for credentials authentication
  image         String?
  accounts      Account[]
  sessions      Session[]
  wordleGames   WordleGame[]
  wordleHistory WordleHistory[]
  streak        Int            @default(0)
  maxStreak     Int            @default(0)
  lastPlayedDate String?       // Format: yyyy-mm-dd
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Wordleverse Models
model WordleGame {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date          String   // Format: yyyy-mm-dd
  word          String
  board         Json     // Serialized board state
  keyboard      Json     // Serialized keyboard state
  guesses       Json?    // Array of guesses made
  row           Int
  expert        Boolean  @default(false)
  win           Boolean?
  completed     Boolean  @default(false)
  playable      Boolean  @default(true)  // Whether this game can still be played (for past games)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, date])
}

model WordleHistory {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date          String   // Format: yyyy-mm-dd
  word          String
  guesses       Int      // Number of guesses (1-6, or null if failed)
  win           Boolean
  createdAt     DateTime @default(now())

  @@unique([userId, date])
}
